package com.jasonzissman.jmeter;import java.util.Arrays;import java.util.HashSet;import java.util.Set;import org.apache.jmeter.config.Arguments;import org.apache.jmeter.config.ConfigTestElement;import org.apache.jmeter.samplers.AbstractSampler;import org.apache.jmeter.samplers.Entry;import org.apache.jmeter.samplers.SampleResult;import org.apache.jmeter.testelement.TestElement;import org.apache.jmeter.testelement.property.StringProperty;import org.apache.jmeter.testelement.property.TestElementProperty;@SuppressWarnings("serial")public class WebSocketSampler extends AbstractSampler {	public final static String WS_ENDPOINT_URL = "ws.endpoint.url";	public final static String WS_DATA_TO_SEND = "ws.data.to.send";	public final static String WS_TERMINATING_MESSAGE = "ws.terminating.message";	public final static String WS_TIMEOUT = "ws.timeout";		public static final String ARGUMENTS = "WebSocketSampler.arguments";	    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(            Arrays.asList(new String[]{                    "com.jasonzissman.jmeter.WebSocketSamplerGui",                    "org.apache.jmeter.config.gui.SimpleConfigGui"}));	    public WebSocketSampler() {        setArguments(new Arguments());    }    	public SampleResult sample(Entry entry) {				String url = getPropertyAsString(WS_ENDPOINT_URL);		String messageToSend = getPropertyAsString(WS_DATA_TO_SEND);		int receiveMessageTimeout = getPropertyAsInt(WS_TIMEOUT);		String responseToEndComm = getPropertyAsString(WS_TERMINATING_MESSAGE);						WebSocketSession session = new WebSocketSession(url, receiveMessageTimeout, messageToSend, responseToEndComm);		session.executeSession();		WebSocketSessionResults webSocketSessionResults = session.getSessionResults();				SampleResult sampleResult = new SampleResult();		sampleResult.setSampleLabel(getName());		if (webSocketSessionResults.wasSuccessful()) {			sampleResult.setSuccessful(true);		} else {			sampleResult.setSuccessful(false);		}				sampleResult.setRequestHeaders(webSocketSessionResults.getLogOfActivity());		sampleResult.setResponseData(webSocketSessionResults.getDataReceivedFromServer(),webSocketSessionResults.getDataReceivedFromServer());		return sampleResult;	}	    @Override    public boolean applies(ConfigTestElement configElement) {        String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();        return APPLIABLE_CONFIG_CLASSES.contains(guiClass);    }        @Override    public void setName(String name) {        if (name != null){            setProperty(TestElement.NAME, name);        }    }    @Override    public String getName() {        return getPropertyAsString(TestElement.NAME);    }    @Override    public void setComment(String comment){        setProperty(new StringProperty(TestElement.COMMENTS, comment));    }    @Override    public String getComment(){        return getProperty(TestElement.COMMENTS).getStringValue();    }        public void setArguments(Arguments value) {        setProperty(new TestElementProperty(ARGUMENTS, value));    }    }